#!/usr/bin/env python
# **********************************************************************
#
# Copyright (c) 2015-2015 ZeroC, Inc. All rights reserved.
#
# **********************************************************************

import os, sys, getopt, tempfile, getpass, shutil, socket, uuid, IceCertUtils

home = os.getenv("ICE_CA_HOME")
if home is None:
   home = os.getenv("LOCALAPPDATA") if sys.platform == "win32" or sys.platform[:6] == "cygwin" else os.getenv("HOME")
   if home is None:
      print("Set ICE_CA_HOME to specify the location of the CA files")
      sys.exit(1)
   home = os.path.join(home, ".iceca")

home = os.path.normpath(home)
os.putenv("ICE_CA_HOME", home)

cadb = os.path.join(home, "db")
def usage():
    print("usage: " + sys.argv[0] + " [--verbose --keep --capass] init create list show export")
    sys.exit(1)

if len(sys.argv) == 1:
    usage()

# Work out the position of the script.
script = 1
while script < len(sys.argv) and sys.argv[script].startswith("--"):
    script = script + 1

if script > len(sys.argv):
    usage()

#
# Parse the global options.
#
try:
    opts, args = getopt.getopt(sys.argv[1:script], "", [ "verbose", "keep"])
except getopt.GetoptError:
    usage()

verbose = False
keep = False
capass = None
for o, a in opts:
   if o == "--verbose":
      verbose = True
   elif o == "--keep":
      keep = True
   elif o == "--capass":
      capass = a

def b(s):
    return s if sys.version_info[0] == 2 else s.encode("utf-8") if isinstance(s, str) else s

def question(message, expected = None):
   sys.stdout.write(message)
   sys.stdout.flush()
   choice = sys.stdin.readline().strip()
   if expected:
      return choice in expected
   else:
      return choice

def parseArgs(min, max, shortopts, longopts, usage):
   try:
      opts, args = getopt.getopt(sys.argv[script+1:], shortopts, longopts)
   except getopt.GetoptError:
      print("usage: " + sys.argv[script] + " " + usage)
      sys.exit(1)

   if len(args) < min or len(args) > max:
      print("usage: " + sys.argv[script] + " " + usage)
      sys.exit(1)

   options = {}
   for o, a in opts:
      options[o[(2 if o.startswith("--") else 1):]] = a

   return (options, args)

if sys.argv[script] == "init":

   opts, _ = parseArgs(0, 0, "", ["overwrite", "no-capass"], "[--overwrite --no-capass]")

   print("This script will initialize your organization's Certificate Authority.")
   print('The CA database will be created in "%s"' % home)

   if "overwrite" in opts:
      # If the CA exists then destroy it.
      if os.path.exists(cadb):
         if not question("Warning: running this command will destroy your existing CA setup!\n"
                         "Do you want to continue? (y/n)", ['y', 'Y']):
            sys.exit(1)
         shutil.rmtree(cadb)

   #
   # Check that the cadb isn't already populated.
   #
   if os.path.exists(cadb):
      print(sys.argv[0] + ": CA has already been initialized.")
      print("Use the --overwrite option to re-initialize the database.")
      sys.exit(1)

   try:
      os.makedirs(cadb)
   except OSError:
      pass

   # Construct the DN for the CA certificate.
   DNelements = {
      'C': "Country name",
      'ST':"State or province name",
      'L': "Locality",
      'O': "Organization name",
      'OU':"Organizational unit name",
      'CN':"Common name",
      'emailAddress': "Email address"
   }

   dn = IceCertUtils.DistinguishedName("Ice CertUtils CA")
   while True:
      print("")
      print("The subject name for your CA will be " + str(dn))
      print("")
      if question("Do you want to keep this as the CA subject name? (y/n) [y]", ['n', 'N']):
         for k,v in DNelements.items():
            v = question(v + ": ")
            if k == 'C' and len(v) > 2:
               print("The contry code can't be longer than 2 characters")
               continue
            setattr(dn, k, v)

      else:
         break

   if "no-capass" in opts:
      # If the user doesn't want a password, we save a random password under the CA home directory.
      capass = str(uuid.uuid4())
      with open(os.path.join(home, "capass"), "w") as f: f.write(b(capass))
   else:
      capass = ""
      while True:
         capass = getpass.getpass("Enter the passphrase to protect the CA:")
         if len(capass) < 6:
            print("The CA passphrase must be at least 6 characters long")
         else:
            break

   IceCertUtils.CertificateFactory(home=cadb, debug=verbose, dn=dn, password=capass)

   print("The CA is initialized in " + home)
   sys.exit(0)

def getCertificateAuthority():
   if not os.path.exists(cadb):
      print(sys.argv[0] + ": the CA it not initialized.")
      sys.exit(1)

   if os.path.exists(os.path.join(home, "capass")):
      with open(os.path.join(home, "capass")) as f: capass = f.read()
   else:
      capass = getpass.getpass("Enter the CA passphrase:")
   return IceCertUtils.CertificateFactory(home=cadb, debug=verbose, password=capass)

if sys.argv[script] == "create":
   opts, args = parseArgs(1, 2, "", ["ip=", "dns="], "[--ip=<ip>] [--dns=<dns>] <alias> [<common-name>]")
   alias = args[0]
   commonName = len(args) == 2 and args[1] or alias
   cert = getCertificateAuthority().create(alias, dn=commonName, ip=opts.get("ip", None), dns=opts.get("dns", None))
   print("Created `%s' certificate `%s'" % (alias, str(cert)))

elif sys.argv[script] == "export":

   opts, args = parseArgs(1, 1, "", ["password=", "alias="], "[--password <password>] [--alias <alias>] path")

   path = args[0]
   alias = opts.get("alias", os.path.splitext(os.path.basename(path))[0])

   passphrase = opts.get("password", None)
   if not passphrase and os.path.splitext(os.path.basename(path))[1] in [".p12", ".jks", ".bks"]:
      passphrase = getpass.getpass("Enter the export passphrase:")

   cert = getCertificateAuthority().get(alias)
   if cert:
      cert.save(path, password=passphrase)
      print("Exported certificate `{alias}' to `{path}'".format(alias=alias, path=path))
   else:
      print("Couldn't find certificate `%s'" % alias)

elif sys.argv[script] == "list":
   opts, args = parseArgs(0, 0, "", [], "")
   print("Certificates: %s" % getCertificateAuthority().list())

elif sys.argv[script] == "show":
   opts, args = parseArgs(1, 1, "", [], "<alias>")
   alias = args[0]
   cert = getCertificateAuthority().get(alias)
   if cert:
      print("Certificate `%s':\n%s" % (alias, cert.toText()))
   else:
      print("Couldn't find certificate `%s'" % alias)

else:
   usage()
